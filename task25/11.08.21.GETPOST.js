/* Существует соглашение, когда мы запрашиваем инфу методом ГЕТ, мы просто читаем инфу, нам присылают готовое, мы ничего не
изменяем на сервере. Есть даже такое понятие, что если мы несколько раз сделаем один и тот же ГЕТ, то получим всегда один и
тот же ответ, это очень важно при вэб - разработке. Что такое метод ГЕТ. Метод ГЕТ - это способ обращения к серверу, в котором
мы передаем инфу через адресную строку. В методе ГЕТ запрос идет через URL-адрес, мы просто просим показать, получить инфу.
Что же такое ГЕТ-запрос сам по себе, помимо URL-адреса, ГЕТ-запрос может содержать параметры. В нем есть знак вопроса, который отделяет
адрес от параметра и идут список параметров. Вот такая query-строка, строка запроса, называется иногда еще ГЕТ-строкой и выглядит
следующим образом: параметр=значение, потом через амперсант еще могут быть, параметр=значение. Параметры соединены знаком Амперсант.
Разделитель - между URL-адресом и параметром - это знак вопроса.*/
//https://en.wikipedia.org/w/index.php?title=The_Blind_Side:_Evolution_of_a_Game&action=edit&section=1

/* file:///C:/Users/Talgat/Documents/VS%20Code/_lessons/html+js/task25/t1.dat?one=dddddddddd&two=5 после добавления формы, где указываем три инпута, первый с типом текст,
второй с типом номер, третий с типом сабмит - это кнопка, где value - это название кнопки, то получаем такую ссылку выше, по
этой ссылке видим, что у меня произойдет запрос к файлу t1.dat, а дальше поскольку я вообще не указал никакого метода в форме,
то браузер сам решил послать инфу в форме ГЕТ-запроса, поэтому после этого dat он собрал всю форму, вычитал все инпуты, добавил
их неймы и их содержимое, и посмотрите, что произошло - содержимое one равно ddddddddddd, содержимое two равно 5, два параметра,
браузер объединил их значком Амперсант.
То есть, если мы через форму посылаем запрос какой-нибудь на сервер, то автоматически вот эти данные добавляются:
    <input type="text" name="one">
    <input type="number" name="two">
Это классический переход по ссылке с параметрами.
Где хорош метод ГЕТ? Метод ГЕТ предполагает, что мы всегда получаем всегда одну и ту же инфу, если делаем запрос методом ГЕТ.
Метод ГЕТ легко передать. В чем удобство метода ГЕТ? Поскольку все параметры запроса дублируются в адресной строке, их можно
скопировать и отдать пользователю. Если вы в интернет-магазине накликали параметры: ноутбуки, цена, цена, фирма и они продублированы
в строке браузера, скопировав этот запрос и отдав вам, я сделаю так, что перейдя по этой ссылке, вы откроете те же самые параметры,
то есть это очень удобно. Это отличный способ передачи инфы. Сейчас пока говорили только о теоретических основах, давайте с вами
подергаем на практике метод ГЕТ. Смотрите, что будет происходить. После ссылки на сайт, прописываем имя файла, к которому будем
обращаться на сервере, например index2.php. Это файл с проверками.
Проверка №1 Авторизация.
После адреса вводим знак вопроса, так начинается ГЕТ-запрос, затем auth, затем нужный параметр, затем через & вводим второй параметр
action и значение параметра 1. То есть обращаясь к одному и тому же файлу, в зависимости от введенных параметров я получаю отдельный
вывод. Но работать в адресной строке не удобно, еще гет запросы я послать могу. ПОСТ запросы слать значительно сложнее. =>
2. Далее идет работа с Постманом. Отличие Постмана от адресной строки, что в нем можно в списке запросов указывать нужный тип запроса.
Методом ГЕТ нельзя передавать логин и пароль, т.к. он виден в адресной строке, не подходит такой метод для такой передачи данных.
Плюс, если мы передаем данные через адресную строку, то длина адресной строки у нас ограничена и ограничен объем передаваемой
инфы, просто неудобно туда запихнуть и невозможно туда запихнуть большой объем инфы. Когда мы запрашиваем ГЕТ-ом, мы просто
запрашиваем инфу, нам большой объем инфы не нужно передавать на сервер, нам нужно передать только управляющие параметры. Но в
некоторых случаях нам нужно изменять содержимое сервера, допустим работая в википедии, где есть Править статью, я решил написать
эту статью, вбил огромное количество инфы, которая явно превосходит по объему, объем адресной строки и вбивая эту инфу и нажимая
кнопку Сохранить, я уже планирую изменить состояние сервера, его базы данных. Так вот для объемных запросов, для тех запросов,
которые изменяют состояние сервера, состояние данных, придумали другие запросы, мы их уже частично видели, их много, но практике
чаще всего все сводят к нескольким, это ГЕТ, ПОСТ, возможно ПУТ, возможно DELETE UPDATE, но ПОСТ и ГЕТ применяются практически
повсеместно. Метод ПОСТ отличается от метода ГЕТ тем что он 1. Не дублирует инфу в адресной строке. То есть у нас даже не получится
в адресной строке послать ПОСТ запрос. Мы можем добавить в форму метод ПОСТ после action. В action поменять значение например на
URL-сайта, потом во вкладке NETWORK будет указан запрошенный адрес, он указан внутри моей экшнформы, метод запроса уже ПОСТ, а внизу
будет Форм-дата, те данные что мы отослали через форму, эти данные я на сервер послал, но в адресной строке они не продублировались.
Если бы я послал логин и пароль, эти данные в адрес.строке не видны, и это нас спасает хотя бы от визуального подглядывания, понятно,
что можно перехватить этот запрос, но я послал эти данные на сервер. Соотвественно, на сервере я могу с этими данными поработать,
что-то изменить и соответственно сервер в зависимости от его настроек, конфигураций, может мне вернуть разную инфу.
*/